// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messaging/server.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Server_LogLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case trace // = 0
  case debug // = 1
  case info // = 2
  case warn // = 3
  case error // = 4
  case critical // = 5
  case off // = 6
  case unknown // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .trace
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .trace
    case 1: self = .debug
    case 2: self = .info
    case 3: self = .warn
    case 4: self = .error
    case 5: self = .critical
    case 6: self = .off
    case 7: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .trace: return 0
    case .debug: return 1
    case .info: return 2
    case .warn: return 3
    case .error: return 4
    case .critical: return 5
    case .off: return 6
    case .unknown: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Server_LogLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Server_LogLevel] = [
    .trace,
    .debug,
    .info,
    .warn,
    .error,
    .critical,
    .off,
    .unknown,
  ]
}

#endif  // swift(>=4.2)

public enum Server_SortBy: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case name // = 0
  case number // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .name
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .name
    case 1: self = .number
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .name: return 0
    case .number: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Server_SortBy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Server_SortBy] = [
    .name,
    .number,
  ]
}

#endif  // swift(>=4.2)

public enum Server_CreatureType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case parrot // = 0
  case wledLight // = 1
  case other // = 999
  case UNRECOGNIZED(Int)

  public init() {
    self = .parrot
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .parrot
    case 1: self = .wledLight
    case 999: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .parrot: return 0
    case .wledLight: return 1
    case .other: return 999
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Server_CreatureType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Server_CreatureType] = [
    .parrot,
    .wledLight,
    .other,
  ]
}

#endif  // swift(>=4.2)

///
///Used to populate the list of creatures
public struct Server_CreatureIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_ListCreaturesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creaturesIds: [Server_CreatureIdentifier] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_GetAllCreaturesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creatures: [Server_Creature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_CreatureFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filter: String = String()

  public var sortBy: Server_SortBy = .name

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_DatabaseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: String = String()

  public var help: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_LogFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var level: Server_LogLevel = .trace

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_CreatureId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_CreatureName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_Creature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var name: String = String()

  public var lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  public var hasLastUpdated: Bool {return self._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdated() {self._lastUpdated = nil}

  public var sacnIp: String = String()

  public var universe: UInt32 = 0

  public var dmxBase: UInt32 = 0

  public var numberOfMotors: UInt32 = 0

  public var type: Server_CreatureType = .parrot

  public var motors: [Server_Creature.Motor] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum MotorType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case servo // = 0
    case stepper // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .servo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .servo
      case 1: self = .stepper
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .servo: return 0
      case .stepper: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Motor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Data = Data()

    public var name: String = String()

    public var type: Server_Creature.MotorType = .servo

    public var number: UInt32 = 0

    public var maxValue: UInt32 = 0

    public var minValue: UInt32 = 0

    public var smoothingValue: Double = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _lastUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Server_Creature.MotorType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Server_Creature.MotorType] = [
    .servo,
    .stepper,
  ]
}

#endif  // swift(>=4.2)

///log_clock::time_point log_time, source_loc loc, string_view_t logger_name, level::level_enum lvl, string_view_t msg);
///source_loc(const char *filename_in, int line_in, const char *funcname_in)
public struct Server_LogItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var level: Server_LogLevel = .trace

  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  public var message: String = String()

  public var loggerName: String = String()

  public var threadID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///*
///One frame to send to a creature
public struct Server_Frame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var universe: UInt32 = 0

  public var dmxOffset: UInt32 = 0

  public var creatureName: String = String()

  public var sacnIp: String = String()

  public var numberOfMotors: UInt32 = 0

  public var frame: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_FrameResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var framesProcessed: UInt32 = 0

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_ServerStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var framesProcessed: UInt64 = 0

  public var startedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAt = newValue}
  }
  /// Returns true if `startedAt` has been explicitly set.
  public var hasStartedAt: Bool {return self._startedAt != nil}
  /// Clears the value of `startedAt`. Subsequent reads from it will return its default value.
  public mutating func clearStartedAt() {self._startedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

///*
///Animation document that's stored in the database!
///
///These are what run on the creatures themselves
public struct Server_Animation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var metadata: Server_Animation.Metadata {
    get {return _metadata ?? Server_Animation.Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var frames: [Server_Animation.Frame] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Metadata {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var title: String = String()

    public var millisecondsPerFrame: Int32 = 0

    public var numberOfFrames: Int32 = 0

    public var creatureType: Server_CreatureType = .parrot

    public var numberOfMotors: Int32 = 0

    public var notes: String = String()

    /// This is a duplicate of the ID of the main animation. It's repeated here
    /// So that we can work backwards from a metadata to a given animation. This
    /// is used in the UI to go from the list of animations into the editor.
    public var animationID: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Frame {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var bytes: [Data] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _metadata: Server_Animation.Metadata? = nil
}

public struct Server_AnimationId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_AnimationFilter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Server_CreatureType = .parrot

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_ListAnimationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var animations: [Server_AnimationIdentifier] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Server_AnimationIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Data = Data()

  public var metadata: Server_Animation.Metadata {
    get {return _metadata ?? Server_Animation.Metadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {self._metadata = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metadata: Server_Animation.Metadata? = nil
}

public struct Server_PlayAnimationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creatureID: Server_CreatureId {
    get {return _creatureID ?? Server_CreatureId()}
    set {_creatureID = newValue}
  }
  /// Returns true if `creatureID` has been explicitly set.
  public var hasCreatureID: Bool {return self._creatureID != nil}
  /// Clears the value of `creatureID`. Subsequent reads from it will return its default value.
  public mutating func clearCreatureID() {self._creatureID = nil}

  public var animationID: Server_AnimationId {
    get {return _animationID ?? Server_AnimationId()}
    set {_animationID = newValue}
  }
  /// Returns true if `animationID` has been explicitly set.
  public var hasAnimationID: Bool {return self._animationID != nil}
  /// Clears the value of `animationID`. Subsequent reads from it will return its default value.
  public mutating func clearAnimationID() {self._animationID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _creatureID: Server_CreatureId? = nil
  fileprivate var _animationID: Server_AnimationId? = nil
}

public struct Server_PlayAnimationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var status: String = String()

  public var numberOfFramesQueued: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Server_LogLevel: @unchecked Sendable {}
extension Server_SortBy: @unchecked Sendable {}
extension Server_CreatureType: @unchecked Sendable {}
extension Server_CreatureIdentifier: @unchecked Sendable {}
extension Server_ListCreaturesResponse: @unchecked Sendable {}
extension Server_GetAllCreaturesResponse: @unchecked Sendable {}
extension Server_CreatureFilter: @unchecked Sendable {}
extension Server_DatabaseInfo: @unchecked Sendable {}
extension Server_LogFilter: @unchecked Sendable {}
extension Server_CreatureId: @unchecked Sendable {}
extension Server_CreatureName: @unchecked Sendable {}
extension Server_Creature: @unchecked Sendable {}
extension Server_Creature.MotorType: @unchecked Sendable {}
extension Server_Creature.Motor: @unchecked Sendable {}
extension Server_LogItem: @unchecked Sendable {}
extension Server_Frame: @unchecked Sendable {}
extension Server_FrameResponse: @unchecked Sendable {}
extension Server_ServerStatus: @unchecked Sendable {}
extension Server_Animation: @unchecked Sendable {}
extension Server_Animation.Metadata: @unchecked Sendable {}
extension Server_Animation.Frame: @unchecked Sendable {}
extension Server_AnimationId: @unchecked Sendable {}
extension Server_AnimationFilter: @unchecked Sendable {}
extension Server_ListAnimationsResponse: @unchecked Sendable {}
extension Server_AnimationIdentifier: @unchecked Sendable {}
extension Server_PlayAnimationRequest: @unchecked Sendable {}
extension Server_PlayAnimationResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "server"

extension Server_LogLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "trace"),
    1: .same(proto: "debug"),
    2: .same(proto: "info"),
    3: .same(proto: "warn"),
    4: .same(proto: "error"),
    5: .same(proto: "critical"),
    6: .same(proto: "off"),
    7: .same(proto: "unknown"),
  ]
}

extension Server_SortBy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "name"),
    1: .same(proto: "number"),
  ]
}

extension Server_CreatureType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "parrot"),
    1: .same(proto: "wled_light"),
    999: .same(proto: "other"),
  ]
}

extension Server_CreatureIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatureIdentifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_CreatureIdentifier, rhs: Server_CreatureIdentifier) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_ListCreaturesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListCreaturesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creaturesIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.creaturesIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creaturesIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.creaturesIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_ListCreaturesResponse, rhs: Server_ListCreaturesResponse) -> Bool {
    if lhs.creaturesIds != rhs.creaturesIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_GetAllCreaturesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAllCreaturesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.creatures) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.creatures, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_GetAllCreaturesResponse, rhs: Server_GetAllCreaturesResponse) -> Bool {
    if lhs.creatures != rhs.creatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_CreatureFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatureFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filter"),
    2: .same(proto: "sortBy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.filter) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.sortBy) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filter.isEmpty {
      try visitor.visitSingularStringField(value: self.filter, fieldNumber: 1)
    }
    if self.sortBy != .name {
      try visitor.visitSingularEnumField(value: self.sortBy, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_CreatureFilter, rhs: Server_CreatureFilter) -> Bool {
    if lhs.filter != rhs.filter {return false}
    if lhs.sortBy != rhs.sortBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_DatabaseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DatabaseInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
    2: .same(proto: "help"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.help) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    if !self.help.isEmpty {
      try visitor.visitSingularStringField(value: self.help, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_DatabaseInfo, rhs: Server_DatabaseInfo) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.help != rhs.help {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_LogFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != .trace {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_LogFilter, rhs: Server_LogFilter) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_CreatureId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatureId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_CreatureId, rhs: Server_CreatureId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_CreatureName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreatureName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_CreatureName, rhs: Server_CreatureName) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Creature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Creature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
    2: .same(proto: "name"),
    3: .standard(proto: "last_updated"),
    4: .standard(proto: "sacn_ip"),
    5: .same(proto: "universe"),
    6: .standard(proto: "dmx_base"),
    7: .standard(proto: "number_of_motors"),
    8: .same(proto: "type"),
    90: .same(proto: "motors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastUpdated) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sacnIp) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.universe) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.dmxBase) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.numberOfMotors) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 90: try { try decoder.decodeRepeatedMessageField(value: &self.motors) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try { if let v = self._lastUpdated {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.sacnIp.isEmpty {
      try visitor.visitSingularStringField(value: self.sacnIp, fieldNumber: 4)
    }
    if self.universe != 0 {
      try visitor.visitSingularUInt32Field(value: self.universe, fieldNumber: 5)
    }
    if self.dmxBase != 0 {
      try visitor.visitSingularUInt32Field(value: self.dmxBase, fieldNumber: 6)
    }
    if self.numberOfMotors != 0 {
      try visitor.visitSingularUInt32Field(value: self.numberOfMotors, fieldNumber: 7)
    }
    if self.type != .parrot {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 8)
    }
    if !self.motors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.motors, fieldNumber: 90)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Creature, rhs: Server_Creature) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.sacnIp != rhs.sacnIp {return false}
    if lhs.universe != rhs.universe {return false}
    if lhs.dmxBase != rhs.dmxBase {return false}
    if lhs.numberOfMotors != rhs.numberOfMotors {return false}
    if lhs.type != rhs.type {return false}
    if lhs.motors != rhs.motors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Creature.MotorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "servo"),
    1: .same(proto: "stepper"),
  ]
}

extension Server_Creature.Motor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Server_Creature.protoMessageName + ".Motor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "number"),
    5: .standard(proto: "max_value"),
    6: .standard(proto: "min_value"),
    7: .standard(proto: "smoothing_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.number) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.maxValue) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.minValue) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.smoothingValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.type != .servo {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 4)
    }
    if self.maxValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxValue, fieldNumber: 5)
    }
    if self.minValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.minValue, fieldNumber: 6)
    }
    if self.smoothingValue != 0 {
      try visitor.visitSingularDoubleField(value: self.smoothingValue, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Creature.Motor, rhs: Server_Creature.Motor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.maxValue != rhs.maxValue {return false}
    if lhs.minValue != rhs.minValue {return false}
    if lhs.smoothingValue != rhs.smoothingValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_LogItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "message"),
    4: .standard(proto: "logger_name"),
    5: .standard(proto: "thread_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.loggerName) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.threadID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.level != .trace {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 1)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if !self.loggerName.isEmpty {
      try visitor.visitSingularStringField(value: self.loggerName, fieldNumber: 4)
    }
    if self.threadID != 0 {
      try visitor.visitSingularUInt32Field(value: self.threadID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_LogItem, rhs: Server_LogItem) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.message != rhs.message {return false}
    if lhs.loggerName != rhs.loggerName {return false}
    if lhs.threadID != rhs.threadID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Frame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Frame"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "universe"),
    2: .standard(proto: "dmx_offset"),
    3: .standard(proto: "creature_name"),
    4: .standard(proto: "sacn_ip"),
    5: .standard(proto: "number_of_motors"),
    10: .same(proto: "frame"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.universe) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.dmxOffset) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.creatureName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sacnIp) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.numberOfMotors) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.frame) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.universe != 0 {
      try visitor.visitSingularUInt32Field(value: self.universe, fieldNumber: 1)
    }
    if self.dmxOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.dmxOffset, fieldNumber: 2)
    }
    if !self.creatureName.isEmpty {
      try visitor.visitSingularStringField(value: self.creatureName, fieldNumber: 3)
    }
    if !self.sacnIp.isEmpty {
      try visitor.visitSingularStringField(value: self.sacnIp, fieldNumber: 4)
    }
    if self.numberOfMotors != 0 {
      try visitor.visitSingularUInt32Field(value: self.numberOfMotors, fieldNumber: 5)
    }
    if !self.frame.isEmpty {
      try visitor.visitSingularBytesField(value: self.frame, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Frame, rhs: Server_Frame) -> Bool {
    if lhs.universe != rhs.universe {return false}
    if lhs.dmxOffset != rhs.dmxOffset {return false}
    if lhs.creatureName != rhs.creatureName {return false}
    if lhs.sacnIp != rhs.sacnIp {return false}
    if lhs.numberOfMotors != rhs.numberOfMotors {return false}
    if lhs.frame != rhs.frame {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_FrameResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FrameResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frames_processed"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.framesProcessed) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.framesProcessed != 0 {
      try visitor.visitSingularUInt32Field(value: self.framesProcessed, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_FrameResponse, rhs: Server_FrameResponse) -> Bool {
    if lhs.framesProcessed != rhs.framesProcessed {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_ServerStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServerStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "frames_processed"),
    2: .standard(proto: "started_at"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.framesProcessed) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.framesProcessed != 0 {
      try visitor.visitSingularUInt64Field(value: self.framesProcessed, fieldNumber: 1)
    }
    try { if let v = self._startedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_ServerStatus, rhs: Server_ServerStatus) -> Bool {
    if lhs.framesProcessed != rhs.framesProcessed {return false}
    if lhs._startedAt != rhs._startedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Animation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Animation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
    2: .same(proto: "metadata"),
    3: .same(proto: "frames"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.frames) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.frames.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.frames, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Animation, rhs: Server_Animation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.frames != rhs.frames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Animation.Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Server_Animation.protoMessageName + ".Metadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .standard(proto: "milliseconds_per_frame"),
    3: .standard(proto: "number_of_frames"),
    4: .standard(proto: "creature_type"),
    5: .standard(proto: "number_of_motors"),
    6: .same(proto: "notes"),
    7: .same(proto: "animationId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.millisecondsPerFrame) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.numberOfFrames) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.creatureType) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.numberOfMotors) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.notes) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.animationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if self.millisecondsPerFrame != 0 {
      try visitor.visitSingularInt32Field(value: self.millisecondsPerFrame, fieldNumber: 2)
    }
    if self.numberOfFrames != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfFrames, fieldNumber: 3)
    }
    if self.creatureType != .parrot {
      try visitor.visitSingularEnumField(value: self.creatureType, fieldNumber: 4)
    }
    if self.numberOfMotors != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfMotors, fieldNumber: 5)
    }
    if !self.notes.isEmpty {
      try visitor.visitSingularStringField(value: self.notes, fieldNumber: 6)
    }
    if !self.animationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.animationID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Animation.Metadata, rhs: Server_Animation.Metadata) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.millisecondsPerFrame != rhs.millisecondsPerFrame {return false}
    if lhs.numberOfFrames != rhs.numberOfFrames {return false}
    if lhs.creatureType != rhs.creatureType {return false}
    if lhs.numberOfMotors != rhs.numberOfMotors {return false}
    if lhs.notes != rhs.notes {return false}
    if lhs.animationID != rhs.animationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_Animation.Frame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Server_Animation.protoMessageName + ".Frame"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.bytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bytes.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.bytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_Animation.Frame, rhs: Server_Animation.Frame) -> Bool {
    if lhs.bytes != rhs.bytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_AnimationId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnimationId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_AnimationId, rhs: Server_AnimationId) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_AnimationFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnimationFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .parrot {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_AnimationFilter, rhs: Server_AnimationFilter) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_ListAnimationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListAnimationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "animations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.animations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.animations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.animations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_ListAnimationsResponse, rhs: Server_ListAnimationsResponse) -> Bool {
    if lhs.animations != rhs.animations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_AnimationIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AnimationIdentifier"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_id"),
    2: .same(proto: "metadata"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_AnimationIdentifier, rhs: Server_AnimationIdentifier) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_PlayAnimationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayAnimationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "creatureId"),
    2: .same(proto: "animationId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._creatureID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._animationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._creatureID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._animationID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_PlayAnimationRequest, rhs: Server_PlayAnimationRequest) -> Bool {
    if lhs._creatureID != rhs._creatureID {return false}
    if lhs._animationID != rhs._animationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Server_PlayAnimationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayAnimationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "number_of_frames_queued"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.numberOfFramesQueued) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if self.numberOfFramesQueued != 0 {
      try visitor.visitSingularInt32Field(value: self.numberOfFramesQueued, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Server_PlayAnimationResponse, rhs: Server_PlayAnimationResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.numberOfFramesQueued != rhs.numberOfFramesQueued {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
