syntax = "proto3";

option go_package = "opsnlops.io/creatures/server";
option java_multiple_files = true;
option java_package = "io.opsnlops.creatures.server";
option java_outer_classname = "NetworkServerProto";

package server;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// TODO: This might be helpful later!
// import "google/protobuf/wrappers.proto";

service CreatureServer {

  // Fetches one from the database
  rpc GetCreature (CreatureId) returns (Creature) {}

  // Get all of them
  rpc GetAllCreatures (CreatureFilter) returns (GetAllCreaturesResponse) {}

  // Create a new creature in the database
  rpc CreateCreature(Creature) returns (DatabaseInfo) {}

  // Update an existing creature in the database
  rpc UpdateCreature(Creature) returns (DatabaseInfo) {}

  // Stream log messages from the server
  rpc StreamLogs(LogFilter) returns (stream LogLine) {}

  // Search for a Creature by name
  rpc SearchCreatures (CreatureName) returns (Creature) {}

  rpc ListCreatures(CreatureFilter) returns (ListCreaturesResponse) {}

  rpc StreamFrames(stream Frame) returns (FrameResponse) {}

  rpc GetServerStatus(google.protobuf.Empty) returns (ServerStatus) {}

}

/*
    Used to populate the list of creatures
 */
message CreatureIdentifier {
  bytes _id = 1;
  string name = 2;
}

message ListCreaturesResponse {
  repeated CreatureIdentifier creaturesIds = 1;
}

message GetAllCreaturesResponse {
  repeated Creature creatures = 1;
}

message CreatureFilter {
  string filter = 1;
  SortBy sortBy = 2;
}

message DatabaseInfo {
  string message = 1;
  string help = 2;

}

message LogFilter {
  LogLevel level = 1;
}

message CreatureId {
  bytes _id = 1;
}

message CreatureName {
  string name = 1;
}

message Creature {
  bytes _id = 1;
  string name = 2;
  google.protobuf.Timestamp last_updated = 3;
  string sacn_ip = 4;
  uint32 universe = 5;
  uint32 dmx_base = 6;
  uint32 number_of_motors = 7;
  repeated Motor motors = 8;

  enum MotorType {
    servo = 0;
    stepper = 1;
  }

  message Motor {
    bytes _id = 1;
    string name = 2;
    MotorType type = 3;
    uint32 number = 4;
    uint32 max_value = 5;
    uint32 min_value = 6;
    double smoothing_value = 7;
  }
}


message LogLine {
    LogLevel level = 1;
    google.protobuf.Timestamp timestamp = 2;
    string message = 3;
}

enum LogLevel {
  trace = 0;
  debug = 1;
  info = 2;
  warn = 3;
  error = 4;
  critical = 5;
  fatal = 6;
}


enum SortBy {
  name = 0;
  number = 1;
}

/**
  One frame to send to a creature
 */
message Frame {
  uint32 universe = 1;
  uint32 dmx_offset = 2;
  string creature_name = 3;
  string sacn_ip = 4;
  uint32 number_of_motors = 5;
  bytes frame = 10;
}

message FrameResponse {
  uint32 frames_processed = 1;
  string message = 2;
}

message ServerStatus {
  uint64 frames_processed = 1;
  google.protobuf.Timestamp started_at = 2;
}
