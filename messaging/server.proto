syntax = "proto3";

option go_package = "opsnlops.io/creatures/server";
option java_multiple_files = true;
option java_package = "io.opsnlops.creatures.server";
option java_outer_classname = "NetworkServerProto";

option optimize_for = SPEED;

package server;

import public "google/protobuf/empty.proto";
import public "google/protobuf/timestamp.proto";

// TODO: This might be helpful later!
// import "google/protobuf/wrappers.proto";

service CreatureServer {

  // Fetches one from the database
  rpc GetCreature (CreatureId) returns (Creature) {}

  // Get all of them
  rpc GetAllCreatures (CreatureFilter) returns (GetAllCreaturesResponse) {}

  // Create a new creature in the database
  rpc CreateCreature(Creature) returns (DatabaseInfo) {}

  // Update an existing creature in the database
  rpc UpdateCreature(Creature) returns (DatabaseInfo) {}

  // Stream log messages from the server
  rpc StreamLogs(LogFilter) returns (stream LogItem) {}

  // Search for a Creature by name
  rpc SearchCreatures (CreatureName) returns (Creature) {}

  rpc ListCreatures(CreatureFilter) returns (ListCreaturesResponse) {}

  // Stream frames from the client to a Creature. Used for real time control, if
  // that's something I want to do.
  rpc StreamFrames(stream Frame) returns (FrameResponse) {}

  rpc GetServerStatus(google.protobuf.Empty) returns (ServerStatus) {}

  /**
    Save a new animation in the database

    Defined in server/animation/database.cpp
   */
  rpc CreateAnimation(Animation) returns (DatabaseInfo) {}
  rpc UpdateAnimation(Animation) returns (DatabaseInfo) {}
  rpc GetAnimation(AnimationId) returns (Animation) {}
  rpc GetAnimationIdentifier(AnimationId) returns (AnimationIdentifier) {}


  /**
    Returns a list of the animations that match a filter
   */
  rpc ListAnimations(AnimationFilter) returns (ListAnimationsResponse) {}

  // Request that an animation get played on a creature
  rpc PlayAnimation(PlayAnimationRequest) returns (PlayAnimationResponse) {}


  // Play a sound file! Used mostly for testing, since PlayAnimation will
  // automatically play a sound if there is one in the animation.
  rpc PlaySound(PlaySoundRequest) returns (PlaySoundResponse) {}

  /**
    Playlists!
   */
  rpc CreatePlaylist(Playlist) returns (DatabaseInfo) {}
  rpc UpdatePlaylist(Playlist) returns (DatabaseInfo) {}
  rpc GetPlaylist(PlaylistIdentifier) returns (Playlist) {}
  rpc ListPlaylists(PlaylistFilter) returns (ListPlaylistsResponse) {}
  rpc StartPlaylist(CreaturePlaylistRequest) returns (CreaturePlaylistResponse) {}
  rpc StopPlaylist(CreatureId) returns (CreaturePlaylistResponse) {}
  rpc GetPlaylistStatus(CreatureId) returns (CreaturePlaylistStatus) {}

}

/*
    Used to populate the list of creatures
 */
message CreatureIdentifier {
  bytes _id = 1;
  string name = 2;
}

message ListCreaturesResponse {
  repeated CreatureIdentifier creaturesIds = 1;
}

message GetAllCreaturesResponse {
  repeated Creature creatures = 1;
}

message CreatureFilter {
  string filter = 1;
  SortBy sortBy = 2;
}

message DatabaseInfo {
  string message = 1;
  string help = 2;

}

message LogFilter {
  LogLevel level = 1;
}

message CreatureId {
  bytes _id = 1;
}

message CreatureName {
  string name = 1;
}

message Creature {
  bytes _id = 1;
  string name = 2;
  google.protobuf.Timestamp last_updated = 3;
  string sacn_ip = 4;
  uint32 universe = 5;
  uint32 dmx_base = 6;
  uint32 number_of_motors = 7;
  CreatureType type = 8;
  bool use_multicast = 9;
  repeated Motor motors = 90;

  enum MotorType {
    servo = 0;
    stepper = 1;
  }

  message Motor {
    bytes _id = 1;
    string name = 2;
    MotorType type = 3;
    uint32 number = 4;
    uint32 max_value = 5;
    uint32 min_value = 6;
    double smoothing_value = 7;
  }
}


//log_clock::time_point log_time, source_loc loc, string_view_t logger_name, level::level_enum lvl, string_view_t msg);
//source_loc(const char *filename_in, int line_in, const char *funcname_in)
message LogItem {
    LogLevel level = 1;
    google.protobuf.Timestamp timestamp = 2;
    string message = 3;
    string logger_name = 4;
    uint32 thread_id = 5;
}

enum LogLevel {
  trace = 0;
  debug = 1;
  info = 2;
  warn = 3;
  error = 4;
  critical = 5;
  off = 6;
  unknown = 7;
}


enum SortBy {
  name = 0;
  number = 1;
}


enum CreatureType {
  parrot = 0;
  wled_light = 1;

  other = 999;
}

/**
  One frame to send to a creature
 */
message Frame {
  uint32 universe = 1;
  uint32 dmx_offset = 2;
  string creature_name = 3;
  string sacn_ip = 4;
  uint32 number_of_motors = 5;
  bytes frame = 10;
}

message FrameResponse {
  uint32 frames_processed = 1;
  string message = 2;
}

message ServerStatus {
  uint64 frames_processed = 1;
  google.protobuf.Timestamp started_at = 2;
}




/**
 Animation document that's stored in the database!

 These are what run on the creatures themselves
 */
message Animation {
  message Metadata {
    string title = 1;
    int32 milliseconds_per_frame = 2;
    int32 number_of_frames = 3;
    CreatureType creature_type = 4;
    int32 number_of_motors = 5;
    string notes = 6;

    // This is a duplicate of the ID of the main animation. It's repeated here
    // So that we can work backwards from a metadata to a given animation. This
    // is used in the UI to go from the list of animations into the editor.
    bytes animationId = 7;

    // The sound file to play while this animation is running.
    string sound_file = 8;
    }

  message Frame {
    repeated bytes bytes = 1;
  }

  bytes _id = 1;
  Metadata metadata = 2;
  repeated Frame frames = 3;
}

message AnimationId {
  bytes _id = 1;
}

message AnimationFilter {
  CreatureType type = 1;
}

message ListAnimationsResponse {
  repeated AnimationIdentifier animations = 1;
}

message AnimationIdentifier {
  bytes _id  = 1;
  Animation.Metadata metadata = 2;
}


message PlayAnimationRequest {
  CreatureId creatureId = 1;
  AnimationId animationId = 2;
}

message PlayAnimationResponse {
  string status = 1;
  int32 number_of_frames_queued = 2;
}

message PlaySoundRequest {
  string fileName = 1;
}

message PlaySoundResponse {
  string message = 1;
}

/**
  Playlists are a list of animations to play

  These are used to have a creature do a loop of animations. The weight is the likelihood
  that one animation will be played, if it's being played randomly. The formula is:

   probability = weight / (sum of the weights)

 */
message PlaylistIdentifier {
  bytes _id = 1;
}

message Playlist {

  message PlaylistItem {
    AnimationId animationId = 1;
    int32 weight = 2;
  }

  PlaylistIdentifier _id = 1;
  string name = 2;
  CreatureType creature_type = 3;
  google.protobuf.Timestamp last_updated = 4;

  // The actual items themselves
  repeated PlaylistItem items = 5;

}

message PlaylistFilter {
  CreatureType creature_type = 1;
  SortBy sortBy = 2;
}

message ListPlaylistsResponse {
  repeated Playlist playlists = 1;
}

message CreaturePlaylistRequest {
  CreatureId         creatureId = 1;
  PlaylistIdentifier playlistId = 2;
}

message CreaturePlaylistResponse {
  bool   success = 1;
  string message = 2;
}

message CreaturePlaylistStatus {
  bool               playing = 1;
  PlaylistIdentifier playlistId = 2;
}