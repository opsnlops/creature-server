// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package network

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CreatureServer_GetCreature_FullMethodName  = "/server.CreatureServer/GetCreature"
	CreatureServer_GetCreatures_FullMethodName = "/server.CreatureServer/GetCreatures"
)

// CreatureServerClient is the client API for CreatureServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreatureServerClient interface {
	// Fetches one from the database
	GetCreature(ctx context.Context, in *CreatureName, opts ...grpc.CallOption) (*Creature, error)
	// Get all of them
	GetCreatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CreatureServer_GetCreaturesClient, error)
}

type creatureServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCreatureServerClient(cc grpc.ClientConnInterface) CreatureServerClient {
	return &creatureServerClient{cc}
}

func (c *creatureServerClient) GetCreature(ctx context.Context, in *CreatureName, opts ...grpc.CallOption) (*Creature, error) {
	out := new(Creature)
	err := c.cc.Invoke(ctx, CreatureServer_GetCreature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatureServerClient) GetCreatures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (CreatureServer_GetCreaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CreatureServer_ServiceDesc.Streams[0], CreatureServer_GetCreatures_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &creatureServerGetCreaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CreatureServer_GetCreaturesClient interface {
	Recv() (*Creature, error)
	grpc.ClientStream
}

type creatureServerGetCreaturesClient struct {
	grpc.ClientStream
}

func (x *creatureServerGetCreaturesClient) Recv() (*Creature, error) {
	m := new(Creature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CreatureServerServer is the server API for CreatureServer service.
// All implementations must embed UnimplementedCreatureServerServer
// for forward compatibility
type CreatureServerServer interface {
	// Fetches one from the database
	GetCreature(context.Context, *CreatureName) (*Creature, error)
	// Get all of them
	GetCreatures(*emptypb.Empty, CreatureServer_GetCreaturesServer) error
	mustEmbedUnimplementedCreatureServerServer()
}

// UnimplementedCreatureServerServer must be embedded to have forward compatible implementations.
type UnimplementedCreatureServerServer struct {
}

func (UnimplementedCreatureServerServer) GetCreature(context.Context, *CreatureName) (*Creature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreature not implemented")
}
func (UnimplementedCreatureServerServer) GetCreatures(*emptypb.Empty, CreatureServer_GetCreaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCreatures not implemented")
}
func (UnimplementedCreatureServerServer) mustEmbedUnimplementedCreatureServerServer() {}

// UnsafeCreatureServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreatureServerServer will
// result in compilation errors.
type UnsafeCreatureServerServer interface {
	mustEmbedUnimplementedCreatureServerServer()
}

func RegisterCreatureServerServer(s grpc.ServiceRegistrar, srv CreatureServerServer) {
	s.RegisterService(&CreatureServer_ServiceDesc, srv)
}

func _CreatureServer_GetCreature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatureName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatureServerServer).GetCreature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreatureServer_GetCreature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatureServerServer).GetCreature(ctx, req.(*CreatureName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreatureServer_GetCreatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CreatureServerServer).GetCreatures(m, &creatureServerGetCreaturesServer{stream})
}

type CreatureServer_GetCreaturesServer interface {
	Send(*Creature) error
	grpc.ServerStream
}

type creatureServerGetCreaturesServer struct {
	grpc.ServerStream
}

func (x *creatureServerGetCreaturesServer) Send(m *Creature) error {
	return x.ServerStream.SendMsg(m)
}

// CreatureServer_ServiceDesc is the grpc.ServiceDesc for CreatureServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreatureServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.CreatureServer",
	HandlerType: (*CreatureServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreature",
			Handler:    _CreatureServer_GetCreature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCreatures",
			Handler:       _CreatureServer_GetCreatures_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
