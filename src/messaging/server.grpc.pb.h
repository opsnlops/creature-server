// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace server {

// TODO: This might be helpful later!
// import "google/protobuf/wrappers.proto";
//
class CreatureServer final {
 public:
  static constexpr char const* service_full_name() {
    return "server.CreatureServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Fetches one from the database
    virtual ::grpc::Status GetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::server::Creature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>> AsyncGetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>>(AsyncGetCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>> PrepareAsyncGetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>>(PrepareAsyncGetCreatureRaw(context, request, cq));
    }
    // Get all of them
    virtual ::grpc::Status GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::server::GetAllCreaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>> AsyncGetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>>(AsyncGetAllCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>> PrepareAsyncGetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>>(PrepareAsyncGetAllCreaturesRaw(context, request, cq));
    }
    // Create a new creature in the database
    virtual ::grpc::Status CreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::server::DatabaseInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> AsyncCreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(AsyncCreateCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> PrepareAsyncCreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(PrepareAsyncCreateCreatureRaw(context, request, cq));
    }
    // Update an existing creature in the database
    virtual ::grpc::Status UpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::server::DatabaseInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> AsyncUpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(AsyncUpdateCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> PrepareAsyncUpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(PrepareAsyncUpdateCreatureRaw(context, request, cq));
    }
    // Stream log messages from the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::server::LogItem>> StreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::server::LogItem>>(StreamLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::server::LogItem>> AsyncStreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::server::LogItem>>(AsyncStreamLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::server::LogItem>> PrepareAsyncStreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::server::LogItem>>(PrepareAsyncStreamLogsRaw(context, request, cq));
    }
    // Search for a Creature by name
    virtual ::grpc::Status SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::server::Creature* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>> AsyncSearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>>(AsyncSearchCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>> PrepareAsyncSearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>>(PrepareAsyncSearchCreaturesRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::server::ListCreaturesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>> AsyncListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>>(AsyncListCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>> PrepareAsyncListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>>(PrepareAsyncListCreaturesRaw(context, request, cq));
    }
    // Stream frames from the client to a Creature. Used for real time control, if
    // that's something I want to do.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::server::Frame>> StreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::server::Frame>>(StreamFramesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::server::Frame>> AsyncStreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::server::Frame>>(AsyncStreamFramesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::server::Frame>> PrepareAsyncStreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::server::Frame>>(PrepareAsyncStreamFramesRaw(context, response, cq));
    }
    virtual ::grpc::Status GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::server::ServerStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>> AsyncGetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>>(AsyncGetServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>> PrepareAsyncGetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>>(PrepareAsyncGetServerStatusRaw(context, request, cq));
    }
    // *
    // Save a new animation in the database
    //
    // Defined in server/animation/database.cpp
    virtual ::grpc::Status CreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::server::DatabaseInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> AsyncCreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(AsyncCreateAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>> PrepareAsyncCreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>>(PrepareAsyncCreateAnimationRaw(context, request, cq));
    }
    // *
    // Returns a list of the animations that match a filter
    virtual ::grpc::Status ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::server::ListAnimationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>> AsyncListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>>(AsyncListAnimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>> PrepareAsyncListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>>(PrepareAsyncListAnimationsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::server::Animation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>> AsyncGetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>>(AsyncGetAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>> PrepareAsyncGetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>>(PrepareAsyncGetAnimationRaw(context, request, cq));
    }
    // Request that an animation get played on a creature
    virtual ::grpc::Status PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::server::PlayAnimationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>> AsyncPlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>>(AsyncPlayAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>> PrepareAsyncPlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>>(PrepareAsyncPlayAnimationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Fetches one from the database
      virtual void GetCreature(::grpc::ClientContext* context, const ::server::CreatureId* request, ::server::Creature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCreature(::grpc::ClientContext* context, const ::server::CreatureId* request, ::server::Creature* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get all of them
      virtual void GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create a new creature in the database
      virtual void CreateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an existing creature in the database
      virtual void UpdateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream log messages from the server
      virtual void StreamLogs(::grpc::ClientContext* context, const ::server::LogFilter* request, ::grpc::ClientReadReactor< ::server::LogItem>* reactor) = 0;
      // Search for a Creature by name
      virtual void SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName* request, ::server::Creature* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName* request, ::server::Creature* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream frames from the client to a Creature. Used for real time control, if
      // that's something I want to do.
      virtual void StreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::ClientWriteReactor< ::server::Frame>* reactor) = 0;
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // Save a new animation in the database
      //
      // Defined in server/animation/database.cpp
      virtual void CreateAnimation(::grpc::ClientContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAnimation(::grpc::ClientContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // *
      // Returns a list of the animations that match a filter
      virtual void ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId* request, ::server::Animation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId* request, ::server::Animation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request that an animation get played on a creature
      virtual void PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>* AsyncGetCreatureRaw(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>* PrepareAsyncGetCreatureRaw(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>* AsyncGetAllCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::GetAllCreaturesResponse>* PrepareAsyncGetAllCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* AsyncCreateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* PrepareAsyncCreateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* AsyncUpdateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* PrepareAsyncUpdateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::server::LogItem>* StreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::server::LogItem>* AsyncStreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::server::LogItem>* PrepareAsyncStreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>* AsyncSearchCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Creature>* PrepareAsyncSearchCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>* AsyncListCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ListCreaturesResponse>* PrepareAsyncListCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::server::Frame>* StreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::server::Frame>* AsyncStreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::server::Frame>* PrepareAsyncStreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>* AsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ServerStatus>* PrepareAsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* AsyncCreateAnimationRaw(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::DatabaseInfo>* PrepareAsyncCreateAnimationRaw(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>* AsyncListAnimationsRaw(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::ListAnimationsResponse>* PrepareAsyncListAnimationsRaw(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>* AsyncGetAnimationRaw(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::Animation>* PrepareAsyncGetAnimationRaw(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>* AsyncPlayAnimationRaw(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::server::PlayAnimationResponse>* PrepareAsyncPlayAnimationRaw(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::server::Creature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>> AsyncGetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>>(AsyncGetCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>> PrepareAsyncGetCreature(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>>(PrepareAsyncGetCreatureRaw(context, request, cq));
    }
    ::grpc::Status GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::server::GetAllCreaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>> AsyncGetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>>(AsyncGetAllCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>> PrepareAsyncGetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>>(PrepareAsyncGetAllCreaturesRaw(context, request, cq));
    }
    ::grpc::Status CreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::server::DatabaseInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> AsyncCreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(AsyncCreateCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> PrepareAsyncCreateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(PrepareAsyncCreateCreatureRaw(context, request, cq));
    }
    ::grpc::Status UpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::server::DatabaseInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> AsyncUpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(AsyncUpdateCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> PrepareAsyncUpdateCreature(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(PrepareAsyncUpdateCreatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::server::LogItem>> StreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::server::LogItem>>(StreamLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::server::LogItem>> AsyncStreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::server::LogItem>>(AsyncStreamLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::server::LogItem>> PrepareAsyncStreamLogs(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::server::LogItem>>(PrepareAsyncStreamLogsRaw(context, request, cq));
    }
    ::grpc::Status SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::server::Creature* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>> AsyncSearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>>(AsyncSearchCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>> PrepareAsyncSearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Creature>>(PrepareAsyncSearchCreaturesRaw(context, request, cq));
    }
    ::grpc::Status ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::server::ListCreaturesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>> AsyncListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>>(AsyncListCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>> PrepareAsyncListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>>(PrepareAsyncListCreaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::server::Frame>> StreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::server::Frame>>(StreamFramesRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::server::Frame>> AsyncStreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::server::Frame>>(AsyncStreamFramesRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::server::Frame>> PrepareAsyncStreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::server::Frame>>(PrepareAsyncStreamFramesRaw(context, response, cq));
    }
    ::grpc::Status GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::server::ServerStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>> AsyncGetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>>(AsyncGetServerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>> PrepareAsyncGetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>>(PrepareAsyncGetServerStatusRaw(context, request, cq));
    }
    ::grpc::Status CreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::server::DatabaseInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> AsyncCreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(AsyncCreateAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>> PrepareAsyncCreateAnimation(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>>(PrepareAsyncCreateAnimationRaw(context, request, cq));
    }
    ::grpc::Status ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::server::ListAnimationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>> AsyncListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>>(AsyncListAnimationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>> PrepareAsyncListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>>(PrepareAsyncListAnimationsRaw(context, request, cq));
    }
    ::grpc::Status GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::server::Animation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Animation>> AsyncGetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Animation>>(AsyncGetAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Animation>> PrepareAsyncGetAnimation(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::Animation>>(PrepareAsyncGetAnimationRaw(context, request, cq));
    }
    ::grpc::Status PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::server::PlayAnimationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>> AsyncPlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>>(AsyncPlayAnimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>> PrepareAsyncPlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>>(PrepareAsyncPlayAnimationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCreature(::grpc::ClientContext* context, const ::server::CreatureId* request, ::server::Creature* response, std::function<void(::grpc::Status)>) override;
      void GetCreature(::grpc::ClientContext* context, const ::server::CreatureId* request, ::server::Creature* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) override;
      void CreateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) override;
      void UpdateCreature(::grpc::ClientContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamLogs(::grpc::ClientContext* context, const ::server::LogFilter* request, ::grpc::ClientReadReactor< ::server::LogItem>* reactor) override;
      void SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName* request, ::server::Creature* response, std::function<void(::grpc::Status)>) override;
      void SearchCreatures(::grpc::ClientContext* context, const ::server::CreatureName* request, ::server::Creature* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCreatures(::grpc::ClientContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamFrames(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::ClientWriteReactor< ::server::Frame>* reactor) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response, std::function<void(::grpc::Status)>) override;
      void GetServerStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAnimation(::grpc::ClientContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response, std::function<void(::grpc::Status)>) override;
      void CreateAnimation(::grpc::ClientContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAnimations(::grpc::ClientContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId* request, ::server::Animation* response, std::function<void(::grpc::Status)>) override;
      void GetAnimation(::grpc::ClientContext* context, const ::server::AnimationId* request, ::server::Animation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response, std::function<void(::grpc::Status)>) override;
      void PlayAnimation(::grpc::ClientContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::server::Creature>* AsyncGetCreatureRaw(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::Creature>* PrepareAsyncGetCreatureRaw(::grpc::ClientContext* context, const ::server::CreatureId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>* AsyncGetAllCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::GetAllCreaturesResponse>* PrepareAsyncGetAllCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* AsyncCreateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* PrepareAsyncCreateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* AsyncUpdateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* PrepareAsyncUpdateCreatureRaw(::grpc::ClientContext* context, const ::server::Creature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::server::LogItem>* StreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request) override;
    ::grpc::ClientAsyncReader< ::server::LogItem>* AsyncStreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::server::LogItem>* PrepareAsyncStreamLogsRaw(::grpc::ClientContext* context, const ::server::LogFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::Creature>* AsyncSearchCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::Creature>* PrepareAsyncSearchCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>* AsyncListCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ListCreaturesResponse>* PrepareAsyncListCreaturesRaw(::grpc::ClientContext* context, const ::server::CreatureFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::server::Frame>* StreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response) override;
    ::grpc::ClientAsyncWriter< ::server::Frame>* AsyncStreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::server::Frame>* PrepareAsyncStreamFramesRaw(::grpc::ClientContext* context, ::server::FrameResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>* AsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ServerStatus>* PrepareAsyncGetServerStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* AsyncCreateAnimationRaw(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::DatabaseInfo>* PrepareAsyncCreateAnimationRaw(::grpc::ClientContext* context, const ::server::Animation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>* AsyncListAnimationsRaw(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::ListAnimationsResponse>* PrepareAsyncListAnimationsRaw(::grpc::ClientContext* context, const ::server::AnimationFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::Animation>* AsyncGetAnimationRaw(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::Animation>* PrepareAsyncGetAnimationRaw(::grpc::ClientContext* context, const ::server::AnimationId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>* AsyncPlayAnimationRaw(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::server::PlayAnimationResponse>* PrepareAsyncPlayAnimationRaw(::grpc::ClientContext* context, const ::server::PlayAnimationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCreature_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllCreatures_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCreature_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCreature_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchCreatures_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCreatures_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamFrames_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAnimation_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAnimations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnimation_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayAnimation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Fetches one from the database
    virtual ::grpc::Status GetCreature(::grpc::ServerContext* context, const ::server::CreatureId* request, ::server::Creature* response);
    // Get all of them
    virtual ::grpc::Status GetAllCreatures(::grpc::ServerContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response);
    // Create a new creature in the database
    virtual ::grpc::Status CreateCreature(::grpc::ServerContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response);
    // Update an existing creature in the database
    virtual ::grpc::Status UpdateCreature(::grpc::ServerContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response);
    // Stream log messages from the server
    virtual ::grpc::Status StreamLogs(::grpc::ServerContext* context, const ::server::LogFilter* request, ::grpc::ServerWriter< ::server::LogItem>* writer);
    // Search for a Creature by name
    virtual ::grpc::Status SearchCreatures(::grpc::ServerContext* context, const ::server::CreatureName* request, ::server::Creature* response);
    virtual ::grpc::Status ListCreatures(::grpc::ServerContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response);
    // Stream frames from the client to a Creature. Used for real time control, if
    // that's something I want to do.
    virtual ::grpc::Status StreamFrames(::grpc::ServerContext* context, ::grpc::ServerReader< ::server::Frame>* reader, ::server::FrameResponse* response);
    virtual ::grpc::Status GetServerStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response);
    // *
    // Save a new animation in the database
    //
    // Defined in server/animation/database.cpp
    virtual ::grpc::Status CreateAnimation(::grpc::ServerContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response);
    // *
    // Returns a list of the animations that match a filter
    virtual ::grpc::Status ListAnimations(::grpc::ServerContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response);
    virtual ::grpc::Status GetAnimation(::grpc::ServerContext* context, const ::server::AnimationId* request, ::server::Animation* response);
    // Request that an animation get played on a creature
    virtual ::grpc::Status PlayAnimation(::grpc::ServerContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCreature() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCreature(::grpc::ServerContext* context, ::server::CreatureId* request, ::grpc::ServerAsyncResponseWriter< ::server::Creature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCreatures(::grpc::ServerContext* context, ::server::CreatureFilter* request, ::grpc::ServerAsyncResponseWriter< ::server::GetAllCreaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCreature() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCreature(::grpc::ServerContext* context, ::server::Creature* request, ::grpc::ServerAsyncResponseWriter< ::server::DatabaseInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCreature(::grpc::ServerContext* context, ::server::Creature* request, ::grpc::ServerAsyncResponseWriter< ::server::DatabaseInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLogs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLogs(::grpc::ServerContext* context, ::server::LogFilter* request, ::grpc::ServerAsyncWriter< ::server::LogItem>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchCreatures(::grpc::ServerContext* context, ::server::CreatureName* request, ::grpc::ServerAsyncResponseWriter< ::server::Creature>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCreatures() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCreatures(::grpc::ServerContext* context, ::server::CreatureFilter* request, ::grpc::ServerAsyncResponseWriter< ::server::ListCreaturesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamFrames() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::server::Frame>* /*reader*/, ::server::FrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamFrames(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::server::FrameResponse, ::server::Frame>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerStatus(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::server::ServerStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAnimation(::grpc::ServerContext* context, ::server::Animation* request, ::grpc::ServerAsyncResponseWriter< ::server::DatabaseInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAnimations() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnimations(::grpc::ServerContext* context, ::server::AnimationFilter* request, ::grpc::ServerAsyncResponseWriter< ::server::ListAnimationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnimation() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimation(::grpc::ServerContext* context, ::server::AnimationId* request, ::grpc::ServerAsyncResponseWriter< ::server::Animation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayAnimation(::grpc::ServerContext* context, ::server::PlayAnimationRequest* request, ::grpc::ServerAsyncResponseWriter< ::server::PlayAnimationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCreature<WithAsyncMethod_GetAllCreatures<WithAsyncMethod_CreateCreature<WithAsyncMethod_UpdateCreature<WithAsyncMethod_StreamLogs<WithAsyncMethod_SearchCreatures<WithAsyncMethod_ListCreatures<WithAsyncMethod_StreamFrames<WithAsyncMethod_GetServerStatus<WithAsyncMethod_CreateAnimation<WithAsyncMethod_ListAnimations<WithAsyncMethod_GetAnimation<WithAsyncMethod_PlayAnimation<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCreature() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::server::CreatureId, ::server::Creature>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::CreatureId* request, ::server::Creature* response) { return this->GetCreature(context, request, response); }));}
    void SetMessageAllocatorFor_GetCreature(
        ::grpc::MessageAllocator< ::server::CreatureId, ::server::Creature>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::CreatureId, ::server::Creature>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::server::CreatureFilter, ::server::GetAllCreaturesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::CreatureFilter* request, ::server::GetAllCreaturesResponse* response) { return this->GetAllCreatures(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllCreatures(
        ::grpc::MessageAllocator< ::server::CreatureFilter, ::server::GetAllCreaturesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::CreatureFilter, ::server::GetAllCreaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCreature() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::server::Creature, ::server::DatabaseInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response) { return this->CreateCreature(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCreature(
        ::grpc::MessageAllocator< ::server::Creature, ::server::DatabaseInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::Creature, ::server::DatabaseInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::server::Creature, ::server::DatabaseInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::Creature* request, ::server::DatabaseInfo* response) { return this->UpdateCreature(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCreature(
        ::grpc::MessageAllocator< ::server::Creature, ::server::DatabaseInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::Creature, ::server::DatabaseInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLogs() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::server::LogFilter, ::server::LogItem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::LogFilter* request) { return this->StreamLogs(context, request); }));
    }
    ~WithCallbackMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::server::LogItem>* StreamLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::server::LogFilter* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::server::CreatureName, ::server::Creature>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::CreatureName* request, ::server::Creature* response) { return this->SearchCreatures(context, request, response); }));}
    void SetMessageAllocatorFor_SearchCreatures(
        ::grpc::MessageAllocator< ::server::CreatureName, ::server::Creature>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::CreatureName, ::server::Creature>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCreatures() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::server::CreatureFilter, ::server::ListCreaturesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::CreatureFilter* request, ::server::ListCreaturesResponse* response) { return this->ListCreatures(context, request, response); }));}
    void SetMessageAllocatorFor_ListCreatures(
        ::grpc::MessageAllocator< ::server::CreatureFilter, ::server::ListCreaturesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::CreatureFilter, ::server::ListCreaturesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamFrames() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::server::Frame, ::server::FrameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::server::FrameResponse* response) { return this->StreamFrames(context, response); }));
    }
    ~WithCallbackMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::server::Frame>* /*reader*/, ::server::FrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::server::Frame>* StreamFrames(
      ::grpc::CallbackServerContext* /*context*/, ::server::FrameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::server::ServerStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::server::ServerStatus* response) { return this->GetServerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerStatus(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::server::ServerStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::server::ServerStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::server::Animation, ::server::DatabaseInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::Animation* request, ::server::DatabaseInfo* response) { return this->CreateAnimation(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAnimation(
        ::grpc::MessageAllocator< ::server::Animation, ::server::DatabaseInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::Animation, ::server::DatabaseInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListAnimations() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::server::AnimationFilter, ::server::ListAnimationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::AnimationFilter* request, ::server::ListAnimationsResponse* response) { return this->ListAnimations(context, request, response); }));}
    void SetMessageAllocatorFor_ListAnimations(
        ::grpc::MessageAllocator< ::server::AnimationFilter, ::server::ListAnimationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::AnimationFilter, ::server::ListAnimationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnimations(
      ::grpc::CallbackServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAnimation() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::server::AnimationId, ::server::Animation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::AnimationId* request, ::server::Animation* response) { return this->GetAnimation(context, request, response); }));}
    void SetMessageAllocatorFor_GetAnimation(
        ::grpc::MessageAllocator< ::server::AnimationId, ::server::Animation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::AnimationId, ::server::Animation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::server::PlayAnimationRequest, ::server::PlayAnimationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::server::PlayAnimationRequest* request, ::server::PlayAnimationResponse* response) { return this->PlayAnimation(context, request, response); }));}
    void SetMessageAllocatorFor_PlayAnimation(
        ::grpc::MessageAllocator< ::server::PlayAnimationRequest, ::server::PlayAnimationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::server::PlayAnimationRequest, ::server::PlayAnimationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCreature<WithCallbackMethod_GetAllCreatures<WithCallbackMethod_CreateCreature<WithCallbackMethod_UpdateCreature<WithCallbackMethod_StreamLogs<WithCallbackMethod_SearchCreatures<WithCallbackMethod_ListCreatures<WithCallbackMethod_StreamFrames<WithCallbackMethod_GetServerStatus<WithCallbackMethod_CreateAnimation<WithCallbackMethod_ListAnimations<WithCallbackMethod_GetAnimation<WithCallbackMethod_PlayAnimation<Service > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCreature() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCreature() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLogs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCreatures() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamFrames() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::server::Frame>* /*reader*/, ::server::FrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAnimations() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnimation() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCreature() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCreature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllCreatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCreature() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCreature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCreature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLogs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchCreatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCreatures() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCreatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamFrames() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::server::Frame>* /*reader*/, ::server::FrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamFrames(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAnimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAnimations() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAnimations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnimation() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayAnimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCreature() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCreature(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllCreatures(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCreature() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCreature(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCreature(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCreature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLogs() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamLogs(context, request); }));
    }
    ~WithRawCallbackMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchCreatures(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCreatures() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCreatures(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCreatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamFrames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamFrames() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->StreamFrames(context, response); }));
    }
    ~WithRawCallbackMethod_StreamFrames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamFrames(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::server::Frame>* /*reader*/, ::server::FrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* StreamFrames(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAnimation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListAnimations() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAnimations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListAnimations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAnimation() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAnimation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlayAnimation(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayAnimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCreature() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::CreatureId, ::server::Creature>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::CreatureId, ::server::Creature>* streamer) {
                       return this->StreamedGetCreature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCreature(::grpc::ServerContext* /*context*/, const ::server::CreatureId* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCreature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::CreatureId,::server::Creature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllCreatures() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::CreatureFilter, ::server::GetAllCreaturesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::CreatureFilter, ::server::GetAllCreaturesResponse>* streamer) {
                       return this->StreamedGetAllCreatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::GetAllCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllCreatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::CreatureFilter,::server::GetAllCreaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCreature() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::Creature, ::server::DatabaseInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::Creature, ::server::DatabaseInfo>* streamer) {
                       return this->StreamedCreateCreature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCreature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::Creature,::server::DatabaseInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCreature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCreature() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::Creature, ::server::DatabaseInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::Creature, ::server::DatabaseInfo>* streamer) {
                       return this->StreamedUpdateCreature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCreature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCreature(::grpc::ServerContext* /*context*/, const ::server::Creature* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCreature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::Creature,::server::DatabaseInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchCreatures() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::CreatureName, ::server::Creature>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::CreatureName, ::server::Creature>* streamer) {
                       return this->StreamedSearchCreatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureName* /*request*/, ::server::Creature* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchCreatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::CreatureName,::server::Creature>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCreatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCreatures() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::CreatureFilter, ::server::ListCreaturesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::CreatureFilter, ::server::ListCreaturesResponse>* streamer) {
                       return this->StreamedListCreatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCreatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCreatures(::grpc::ServerContext* /*context*/, const ::server::CreatureFilter* /*request*/, ::server::ListCreaturesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCreatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::CreatureFilter,::server::ListCreaturesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerStatus() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::server::ServerStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::server::ServerStatus>* streamer) {
                       return this->StreamedGetServerStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerStatus(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::server::ServerStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::server::ServerStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAnimation() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::Animation, ::server::DatabaseInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::Animation, ::server::DatabaseInfo>* streamer) {
                       return this->StreamedCreateAnimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAnimation(::grpc::ServerContext* /*context*/, const ::server::Animation* /*request*/, ::server::DatabaseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAnimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::Animation,::server::DatabaseInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAnimations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAnimations() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::AnimationFilter, ::server::ListAnimationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::AnimationFilter, ::server::ListAnimationsResponse>* streamer) {
                       return this->StreamedListAnimations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAnimations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAnimations(::grpc::ServerContext* /*context*/, const ::server::AnimationFilter* /*request*/, ::server::ListAnimationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAnimations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::AnimationFilter,::server::ListAnimationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAnimation() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::AnimationId, ::server::Animation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::AnimationId, ::server::Animation>* streamer) {
                       return this->StreamedGetAnimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnimation(::grpc::ServerContext* /*context*/, const ::server::AnimationId* /*request*/, ::server::Animation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAnimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::AnimationId,::server::Animation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayAnimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlayAnimation() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::server::PlayAnimationRequest, ::server::PlayAnimationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::server::PlayAnimationRequest, ::server::PlayAnimationResponse>* streamer) {
                       return this->StreamedPlayAnimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlayAnimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayAnimation(::grpc::ServerContext* /*context*/, const ::server::PlayAnimationRequest* /*request*/, ::server::PlayAnimationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayAnimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::server::PlayAnimationRequest,::server::PlayAnimationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCreature<WithStreamedUnaryMethod_GetAllCreatures<WithStreamedUnaryMethod_CreateCreature<WithStreamedUnaryMethod_UpdateCreature<WithStreamedUnaryMethod_SearchCreatures<WithStreamedUnaryMethod_ListCreatures<WithStreamedUnaryMethod_GetServerStatus<WithStreamedUnaryMethod_CreateAnimation<WithStreamedUnaryMethod_ListAnimations<WithStreamedUnaryMethod_GetAnimation<WithStreamedUnaryMethod_PlayAnimation<Service > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamLogs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::server::LogFilter, ::server::LogItem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::server::LogFilter, ::server::LogItem>* streamer) {
                       return this->StreamedStreamLogs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamLogs(::grpc::ServerContext* /*context*/, const ::server::LogFilter* /*request*/, ::grpc::ServerWriter< ::server::LogItem>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::server::LogFilter,::server::LogItem>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamLogs<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCreature<WithStreamedUnaryMethod_GetAllCreatures<WithStreamedUnaryMethod_CreateCreature<WithStreamedUnaryMethod_UpdateCreature<WithSplitStreamingMethod_StreamLogs<WithStreamedUnaryMethod_SearchCreatures<WithStreamedUnaryMethod_ListCreatures<WithStreamedUnaryMethod_GetServerStatus<WithStreamedUnaryMethod_CreateAnimation<WithStreamedUnaryMethod_ListAnimations<WithStreamedUnaryMethod_GetAnimation<WithStreamedUnaryMethod_PlayAnimation<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace server


#endif  // GRPC_server_2eproto__INCLUDED
