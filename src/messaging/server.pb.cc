// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace server {
PROTOBUF_CONSTEXPR CreatureIdentifier::CreatureIdentifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureIdentifierDefaultTypeInternal() {}
  union {
    CreatureIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureIdentifierDefaultTypeInternal _CreatureIdentifier_default_instance_;
PROTOBUF_CONSTEXPR ListCreaturesResponse::ListCreaturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creaturesids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListCreaturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCreaturesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCreaturesResponseDefaultTypeInternal() {}
  union {
    ListCreaturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCreaturesResponseDefaultTypeInternal _ListCreaturesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetAllCreaturesResponse::GetAllCreaturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creatures_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAllCreaturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAllCreaturesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAllCreaturesResponseDefaultTypeInternal() {}
  union {
    GetAllCreaturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAllCreaturesResponseDefaultTypeInternal _GetAllCreaturesResponse_default_instance_;
PROTOBUF_CONSTEXPR CreatureFilter::CreatureFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sortby_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureFilterDefaultTypeInternal() {}
  union {
    CreatureFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureFilterDefaultTypeInternal _CreatureFilter_default_instance_;
PROTOBUF_CONSTEXPR DatabaseInfo::DatabaseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.help_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatabaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatabaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatabaseInfoDefaultTypeInternal() {}
  union {
    DatabaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatabaseInfoDefaultTypeInternal _DatabaseInfo_default_instance_;
PROTOBUF_CONSTEXPR LogFilter::LogFilter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogFilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogFilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogFilterDefaultTypeInternal() {}
  union {
    LogFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogFilterDefaultTypeInternal _LogFilter_default_instance_;
PROTOBUF_CONSTEXPR CreatureId::CreatureId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureIdDefaultTypeInternal() {}
  union {
    CreatureId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureIdDefaultTypeInternal _CreatureId_default_instance_;
PROTOBUF_CONSTEXPR CreatureName::CreatureName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureNameDefaultTypeInternal() {}
  union {
    CreatureName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureNameDefaultTypeInternal _CreatureName_default_instance_;
PROTOBUF_CONSTEXPR Creature_Motor::Creature_Motor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.number_)*/0u
  , /*decltype(_impl_.max_value_)*/0u
  , /*decltype(_impl_.min_value_)*/0u
  , /*decltype(_impl_.smoothing_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Creature_MotorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Creature_MotorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Creature_MotorDefaultTypeInternal() {}
  union {
    Creature_Motor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Creature_MotorDefaultTypeInternal _Creature_Motor_default_instance_;
PROTOBUF_CONSTEXPR Creature::Creature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motors_)*/{}
  , /*decltype(_impl_._id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sacn_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_updated_)*/nullptr
  , /*decltype(_impl_.universe_)*/0u
  , /*decltype(_impl_.dmx_base_)*/0u
  , /*decltype(_impl_.number_of_motors_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatureDefaultTypeInternal() {}
  union {
    Creature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatureDefaultTypeInternal _Creature_default_instance_;
PROTOBUF_CONSTEXPR LogLine::LogLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogLineDefaultTypeInternal() {}
  union {
    LogLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogLineDefaultTypeInternal _LogLine_default_instance_;
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.creature_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.universe_)*/0u
  , /*decltype(_impl_.dmx_offset_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
PROTOBUF_CONSTEXPR FrameResponse::FrameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frames_processed_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FrameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameResponseDefaultTypeInternal() {}
  union {
    FrameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameResponseDefaultTypeInternal _FrameResponse_default_instance_;
PROTOBUF_CONSTEXPR ServerStatus::ServerStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.started_at_)*/nullptr
  , /*decltype(_impl_.frames_processed_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerStatusDefaultTypeInternal() {}
  union {
    ServerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerStatusDefaultTypeInternal _ServerStatus_default_instance_;
}  // namespace server
static ::_pb::Metadata file_level_metadata_server_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const uint32_t TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::CreatureIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::CreatureIdentifier, _impl_._id_),
  PROTOBUF_FIELD_OFFSET(::server::CreatureIdentifier, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::ListCreaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::ListCreaturesResponse, _impl_.creaturesids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::GetAllCreaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::GetAllCreaturesResponse, _impl_.creatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::CreatureFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::CreatureFilter, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::server::CreatureFilter, _impl_.sortby_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::DatabaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::DatabaseInfo, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::server::DatabaseInfo, _impl_.help_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::LogFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::LogFilter, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::CreatureId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::CreatureId, _impl_._id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::CreatureName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::CreatureName, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_._id_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.max_value_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::server::Creature_Motor, _impl_.smoothing_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::Creature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_._id_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.last_updated_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.sacn_ip_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.universe_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.dmx_base_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.number_of_motors_),
  PROTOBUF_FIELD_OFFSET(::server::Creature, _impl_.motors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::LogLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::LogLine, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::server::LogLine, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::server::LogLine, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::Frame, _impl_.universe_),
  PROTOBUF_FIELD_OFFSET(::server::Frame, _impl_.dmx_offset_),
  PROTOBUF_FIELD_OFFSET(::server::Frame, _impl_.creature_name_),
  PROTOBUF_FIELD_OFFSET(::server::Frame, _impl_.frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::FrameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::FrameResponse, _impl_.frames_processed_),
  PROTOBUF_FIELD_OFFSET(::server::FrameResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server::ServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::server::ServerStatus, _impl_.frames_processed_),
  PROTOBUF_FIELD_OFFSET(::server::ServerStatus, _impl_.started_at_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::server::CreatureIdentifier)},
  { 8, -1, -1, sizeof(::server::ListCreaturesResponse)},
  { 15, -1, -1, sizeof(::server::GetAllCreaturesResponse)},
  { 22, -1, -1, sizeof(::server::CreatureFilter)},
  { 30, -1, -1, sizeof(::server::DatabaseInfo)},
  { 38, -1, -1, sizeof(::server::LogFilter)},
  { 45, -1, -1, sizeof(::server::CreatureId)},
  { 52, -1, -1, sizeof(::server::CreatureName)},
  { 59, -1, -1, sizeof(::server::Creature_Motor)},
  { 72, -1, -1, sizeof(::server::Creature)},
  { 86, -1, -1, sizeof(::server::LogLine)},
  { 95, -1, -1, sizeof(::server::Frame)},
  { 105, -1, -1, sizeof(::server::FrameResponse)},
  { 113, -1, -1, sizeof(::server::ServerStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::server::_CreatureIdentifier_default_instance_._instance,
  &::server::_ListCreaturesResponse_default_instance_._instance,
  &::server::_GetAllCreaturesResponse_default_instance_._instance,
  &::server::_CreatureFilter_default_instance_._instance,
  &::server::_DatabaseInfo_default_instance_._instance,
  &::server::_LogFilter_default_instance_._instance,
  &::server::_CreatureId_default_instance_._instance,
  &::server::_CreatureName_default_instance_._instance,
  &::server::_Creature_Motor_default_instance_._instance,
  &::server::_Creature_default_instance_._instance,
  &::server::_LogLine_default_instance_._instance,
  &::server::_Frame_default_instance_._instance,
  &::server::_FrameResponse_default_instance_._instance,
  &::server::_ServerStatus_default_instance_._instance,
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\006server\032\033google/protobuf/"
  "empty.proto\032\037google/protobuf/timestamp.p"
  "roto\"/\n\022CreatureIdentifier\022\013\n\003_id\030\001 \001(\014\022"
  "\014\n\004name\030\002 \001(\t\"I\n\025ListCreaturesResponse\0220"
  "\n\014creaturesIds\030\001 \003(\0132\032.server.CreatureId"
  "entifier\">\n\027GetAllCreaturesResponse\022#\n\tc"
  "reatures\030\001 \003(\0132\020.server.Creature\"@\n\016Crea"
  "tureFilter\022\016\n\006filter\030\001 \001(\t\022\036\n\006sortBy\030\002 \001"
  "(\0162\016.server.SortBy\"-\n\014DatabaseInfo\022\017\n\007me"
  "ssage\030\001 \001(\t\022\014\n\004help\030\002 \001(\t\",\n\tLogFilter\022\037"
  "\n\005level\030\001 \001(\0162\020.server.LogLevel\"\031\n\nCreat"
  "ureId\022\013\n\003_id\030\001 \001(\014\"\034\n\014CreatureName\022\014\n\004na"
  "me\030\001 \001(\t\"\221\003\n\010Creature\022\013\n\003_id\030\001 \001(\014\022\014\n\004na"
  "me\030\002 \001(\t\0220\n\014last_updated\030\003 \001(\0132\032.google."
  "protobuf.Timestamp\022\017\n\007sacn_ip\030\004 \001(\t\022\020\n\010u"
  "niverse\030\005 \001(\r\022\020\n\010dmx_base\030\006 \001(\r\022\030\n\020numbe"
  "r_of_motors\030\007 \001(\r\022&\n\006motors\030\010 \003(\0132\026.serv"
  "er.Creature.Motor\032\233\001\n\005Motor\022\013\n\003_id\030\001 \001(\014"
  "\022\014\n\004name\030\002 \001(\t\022(\n\004type\030\003 \001(\0162\032.server.Cr"
  "eature.MotorType\022\016\n\006number\030\004 \001(\r\022\021\n\tmax_"
  "value\030\005 \001(\r\022\021\n\tmin_value\030\006 \001(\r\022\027\n\017smooth"
  "ing_value\030\007 \001(\001\"#\n\tMotorType\022\t\n\005servo\020\000\022"
  "\013\n\007stepper\020\001\"j\n\007LogLine\022\037\n\005level\030\001 \001(\0162\020"
  ".server.LogLevel\022-\n\ttimestamp\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\022\017\n\007message\030\003 \001(\t"
  "\"S\n\005Frame\022\020\n\010universe\030\001 \001(\r\022\022\n\ndmx_offse"
  "t\030\002 \001(\r\022\025\n\rcreature_name\030\003 \001(\t\022\r\n\005frame\030"
  "\004 \001(\014\":\n\rFrameResponse\022\030\n\020frames_process"
  "ed\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"X\n\014ServerStatu"
  "s\022\030\n\020frames_processed\030\001 \001(\004\022.\n\nstarted_a"
  "t\030\002 \001(\0132\032.google.protobuf.Timestamp*X\n\010L"
  "ogLevel\022\t\n\005trace\020\000\022\t\n\005debug\020\001\022\010\n\004info\020\002\022"
  "\010\n\004warn\020\003\022\t\n\005error\020\004\022\014\n\010critical\020\005\022\t\n\005fa"
  "tal\020\006*\036\n\006SortBy\022\010\n\004name\020\000\022\n\n\006number\020\0012\307\004"
  "\n\016CreatureServer\0225\n\013GetCreature\022\022.server"
  ".CreatureId\032\020.server.Creature\"\000\022L\n\017GetAl"
  "lCreatures\022\026.server.CreatureFilter\032\037.ser"
  "ver.GetAllCreaturesResponse\"\000\022:\n\016CreateC"
  "reature\022\020.server.Creature\032\024.server.Datab"
  "aseInfo\"\000\022:\n\016UpdateCreature\022\020.server.Cre"
  "ature\032\024.server.DatabaseInfo\"\000\0224\n\nStreamL"
  "ogs\022\021.server.LogFilter\032\017.server.LogLine\""
  "\0000\001\022;\n\017SearchCreatures\022\024.server.Creature"
  "Name\032\020.server.Creature\"\000\022H\n\rListCreature"
  "s\022\026.server.CreatureFilter\032\035.server.ListC"
  "reaturesResponse\"\000\0228\n\014StreamFrames\022\r.ser"
  "ver.Frame\032\025.server.FrameResponse\"\000(\001\022A\n\017"
  "GetServerStatus\022\026.google.protobuf.Empty\032"
  "\024.server.ServerStatus\"\000BR\n\034io.opsnlops.c"
  "reatures.serverB\022NetworkServerProtoP\001Z\034o"
  "psnlops.io/creatures/serverb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_server_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_2eproto = {
    false, false, 2035, descriptor_table_protodef_server_2eproto,
    "server.proto",
    &descriptor_table_server_2eproto_once, descriptor_table_server_2eproto_deps, 2, 14,
    schemas, file_default_instances, TableStruct_server_2eproto::offsets,
    file_level_metadata_server_2eproto, file_level_enum_descriptors_server_2eproto,
    file_level_service_descriptors_server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_2eproto_getter() {
  return &descriptor_table_server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_2eproto(&descriptor_table_server_2eproto);
namespace server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Creature_MotorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[0];
}
bool Creature_MotorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Creature_MotorType Creature::servo;
constexpr Creature_MotorType Creature::stepper;
constexpr Creature_MotorType Creature::MotorType_MIN;
constexpr Creature_MotorType Creature::MotorType_MAX;
constexpr int Creature::MotorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[1];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortBy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2eproto);
  return file_level_enum_descriptors_server_2eproto[2];
}
bool SortBy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CreatureIdentifier::_Internal {
 public:
};

CreatureIdentifier::CreatureIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.CreatureIdentifier)
}
CreatureIdentifier::CreatureIdentifier(const CreatureIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatureIdentifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _this->_impl_._id_.Set(from._internal__id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:server.CreatureIdentifier)
}

inline void CreatureIdentifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatureIdentifier::~CreatureIdentifier() {
  // @@protoc_insertion_point(destructor:server.CreatureIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatureIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._id_.Destroy();
  _impl_.name_.Destroy();
}

void CreatureIdentifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatureIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:server.CreatureIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatureIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.CreatureIdentifier.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatureIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.CreatureIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal__id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.CreatureIdentifier.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.CreatureIdentifier)
  return target;
}

size_t CreatureIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.CreatureIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatureIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatureIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatureIdentifier::GetClassData() const { return &_class_data_; }


void CreatureIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatureIdentifier*>(&to_msg);
  auto& from = static_cast<const CreatureIdentifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.CreatureIdentifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__id().empty()) {
    _this->_internal_set__id(from._internal__id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatureIdentifier::CopyFrom(const CreatureIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.CreatureIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureIdentifier::IsInitialized() const {
  return true;
}

void CreatureIdentifier::InternalSwap(CreatureIdentifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._id_, lhs_arena,
      &other->_impl_._id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatureIdentifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[0]);
}

// ===================================================================

class ListCreaturesResponse::_Internal {
 public:
};

ListCreaturesResponse::ListCreaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.ListCreaturesResponse)
}
ListCreaturesResponse::ListCreaturesResponse(const ListCreaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListCreaturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creaturesids_){from._impl_.creaturesids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.ListCreaturesResponse)
}

inline void ListCreaturesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.creaturesids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListCreaturesResponse::~ListCreaturesResponse() {
  // @@protoc_insertion_point(destructor:server.ListCreaturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCreaturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creaturesids_.~RepeatedPtrField();
}

void ListCreaturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListCreaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.ListCreaturesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creaturesids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCreaturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .server.CreatureIdentifier creaturesIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_creaturesids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCreaturesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.ListCreaturesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server.CreatureIdentifier creaturesIds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_creaturesids_size()); i < n; i++) {
    const auto& repfield = this->_internal_creaturesids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.ListCreaturesResponse)
  return target;
}

size_t ListCreaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.ListCreaturesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server.CreatureIdentifier creaturesIds = 1;
  total_size += 1UL * this->_internal_creaturesids_size();
  for (const auto& msg : this->_impl_.creaturesids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCreaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListCreaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCreaturesResponse::GetClassData() const { return &_class_data_; }


void ListCreaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListCreaturesResponse*>(&to_msg);
  auto& from = static_cast<const ListCreaturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.ListCreaturesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.creaturesids_.MergeFrom(from._impl_.creaturesids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCreaturesResponse::CopyFrom(const ListCreaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.ListCreaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCreaturesResponse::IsInitialized() const {
  return true;
}

void ListCreaturesResponse::InternalSwap(ListCreaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.creaturesids_.InternalSwap(&other->_impl_.creaturesids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCreaturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[1]);
}

// ===================================================================

class GetAllCreaturesResponse::_Internal {
 public:
};

GetAllCreaturesResponse::GetAllCreaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.GetAllCreaturesResponse)
}
GetAllCreaturesResponse::GetAllCreaturesResponse(const GetAllCreaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAllCreaturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creatures_){from._impl_.creatures_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server.GetAllCreaturesResponse)
}

inline void GetAllCreaturesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.creatures_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAllCreaturesResponse::~GetAllCreaturesResponse() {
  // @@protoc_insertion_point(destructor:server.GetAllCreaturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAllCreaturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creatures_.~RepeatedPtrField();
}

void GetAllCreaturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAllCreaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.GetAllCreaturesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAllCreaturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .server.Creature creatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_creatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAllCreaturesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.GetAllCreaturesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .server.Creature creatures = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_creatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_creatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.GetAllCreaturesResponse)
  return target;
}

size_t GetAllCreaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.GetAllCreaturesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server.Creature creatures = 1;
  total_size += 1UL * this->_internal_creatures_size();
  for (const auto& msg : this->_impl_.creatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAllCreaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAllCreaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAllCreaturesResponse::GetClassData() const { return &_class_data_; }


void GetAllCreaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAllCreaturesResponse*>(&to_msg);
  auto& from = static_cast<const GetAllCreaturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.GetAllCreaturesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.creatures_.MergeFrom(from._impl_.creatures_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAllCreaturesResponse::CopyFrom(const GetAllCreaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.GetAllCreaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllCreaturesResponse::IsInitialized() const {
  return true;
}

void GetAllCreaturesResponse::InternalSwap(GetAllCreaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.creatures_.InternalSwap(&other->_impl_.creatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAllCreaturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[2]);
}

// ===================================================================

class CreatureFilter::_Internal {
 public:
};

CreatureFilter::CreatureFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.CreatureFilter)
}
CreatureFilter::CreatureFilter(const CreatureFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatureFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){}
    , decltype(_impl_.sortby_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filter().empty()) {
    _this->_impl_.filter_.Set(from._internal_filter(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sortby_ = from._impl_.sortby_;
  // @@protoc_insertion_point(copy_constructor:server.CreatureFilter)
}

inline void CreatureFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filter_){}
    , decltype(_impl_.sortby_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatureFilter::~CreatureFilter() {
  // @@protoc_insertion_point(destructor:server.CreatureFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatureFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filter_.Destroy();
}

void CreatureFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatureFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.CreatureFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filter_.ClearToEmpty();
  _impl_.sortby_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatureFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.CreatureFilter.filter"));
        } else
          goto handle_unusual;
        continue;
      // .server.SortBy sortBy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sortby(static_cast<::server::SortBy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatureFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.CreatureFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.CreatureFilter.filter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter(), target);
  }

  // .server.SortBy sortBy = 2;
  if (this->_internal_sortby() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sortby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.CreatureFilter)
  return target;
}

size_t CreatureFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.CreatureFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter = 1;
  if (!this->_internal_filter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // .server.SortBy sortBy = 2;
  if (this->_internal_sortby() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sortby());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatureFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatureFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatureFilter::GetClassData() const { return &_class_data_; }


void CreatureFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatureFilter*>(&to_msg);
  auto& from = static_cast<const CreatureFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.CreatureFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filter().empty()) {
    _this->_internal_set_filter(from._internal_filter());
  }
  if (from._internal_sortby() != 0) {
    _this->_internal_set_sortby(from._internal_sortby());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatureFilter::CopyFrom(const CreatureFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.CreatureFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureFilter::IsInitialized() const {
  return true;
}

void CreatureFilter::InternalSwap(CreatureFilter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filter_, lhs_arena,
      &other->_impl_.filter_, rhs_arena
  );
  swap(_impl_.sortby_, other->_impl_.sortby_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatureFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[3]);
}

// ===================================================================

class DatabaseInfo::_Internal {
 public:
};

DatabaseInfo::DatabaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.DatabaseInfo)
}
DatabaseInfo::DatabaseInfo(const DatabaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatabaseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.help_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.help_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.help_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_help().empty()) {
    _this->_impl_.help_.Set(from._internal_help(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:server.DatabaseInfo)
}

inline void DatabaseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.help_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.help_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.help_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DatabaseInfo::~DatabaseInfo() {
  // @@protoc_insertion_point(destructor:server.DatabaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatabaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.help_.Destroy();
}

void DatabaseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatabaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:server.DatabaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.help_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatabaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.DatabaseInfo.message"));
        } else
          goto handle_unusual;
        continue;
      // string help = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_help();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.DatabaseInfo.help"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatabaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.DatabaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.DatabaseInfo.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string help = 2;
  if (!this->_internal_help().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_help().data(), static_cast<int>(this->_internal_help().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.DatabaseInfo.help");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_help(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.DatabaseInfo)
  return target;
}

size_t DatabaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.DatabaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string help = 2;
  if (!this->_internal_help().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_help());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatabaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatabaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatabaseInfo::GetClassData() const { return &_class_data_; }


void DatabaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatabaseInfo*>(&to_msg);
  auto& from = static_cast<const DatabaseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.DatabaseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_help().empty()) {
    _this->_internal_set_help(from._internal_help());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatabaseInfo::CopyFrom(const DatabaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.DatabaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseInfo::IsInitialized() const {
  return true;
}

void DatabaseInfo::InternalSwap(DatabaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.help_, lhs_arena,
      &other->_impl_.help_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DatabaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[4]);
}

// ===================================================================

class LogFilter::_Internal {
 public:
};

LogFilter::LogFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.LogFilter)
}
LogFilter::LogFilter(const LogFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogFilter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:server.LogFilter)
}

inline void LogFilter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogFilter::~LogFilter() {
  // @@protoc_insertion_point(destructor:server.LogFilter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogFilter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:server.LogFilter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogFilter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .server.LogLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::server::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogFilter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.LogFilter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.LogFilter)
  return target;
}

size_t LogFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.LogFilter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogFilter::GetClassData() const { return &_class_data_; }


void LogFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogFilter*>(&to_msg);
  auto& from = static_cast<const LogFilter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.LogFilter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogFilter::CopyFrom(const LogFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.LogFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogFilter::IsInitialized() const {
  return true;
}

void LogFilter::InternalSwap(LogFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogFilter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[5]);
}

// ===================================================================

class CreatureId::_Internal {
 public:
};

CreatureId::CreatureId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.CreatureId)
}
CreatureId::CreatureId(const CreatureId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatureId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _this->_impl_._id_.Set(from._internal__id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:server.CreatureId)
}

inline void CreatureId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatureId::~CreatureId() {
  // @@protoc_insertion_point(destructor:server.CreatureId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatureId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._id_.Destroy();
}

void CreatureId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatureId::Clear() {
// @@protoc_insertion_point(message_clear_start:server.CreatureId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatureId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatureId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.CreatureId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal__id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.CreatureId)
  return target;
}

size_t CreatureId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.CreatureId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatureId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatureId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatureId::GetClassData() const { return &_class_data_; }


void CreatureId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatureId*>(&to_msg);
  auto& from = static_cast<const CreatureId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.CreatureId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__id().empty()) {
    _this->_internal_set__id(from._internal__id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatureId::CopyFrom(const CreatureId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.CreatureId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureId::IsInitialized() const {
  return true;
}

void CreatureId::InternalSwap(CreatureId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._id_, lhs_arena,
      &other->_impl_._id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatureId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[6]);
}

// ===================================================================

class CreatureName::_Internal {
 public:
};

CreatureName::CreatureName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.CreatureName)
}
CreatureName::CreatureName(const CreatureName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreatureName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:server.CreatureName)
}

inline void CreatureName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreatureName::~CreatureName() {
  // @@protoc_insertion_point(destructor:server.CreatureName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreatureName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CreatureName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreatureName::Clear() {
// @@protoc_insertion_point(message_clear_start:server.CreatureName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatureName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.CreatureName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreatureName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.CreatureName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.CreatureName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.CreatureName)
  return target;
}

size_t CreatureName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.CreatureName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreatureName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreatureName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreatureName::GetClassData() const { return &_class_data_; }


void CreatureName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreatureName*>(&to_msg);
  auto& from = static_cast<const CreatureName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.CreatureName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreatureName::CopyFrom(const CreatureName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.CreatureName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureName::IsInitialized() const {
  return true;
}

void CreatureName::InternalSwap(CreatureName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatureName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[7]);
}

// ===================================================================

class Creature_Motor::_Internal {
 public:
};

Creature_Motor::Creature_Motor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.Creature.Motor)
}
Creature_Motor::Creature_Motor(const Creature_Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Creature_Motor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.max_value_){}
    , decltype(_impl_.min_value_){}
    , decltype(_impl_.smoothing_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _this->_impl_._id_.Set(from._internal__id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.smoothing_value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.smoothing_value_));
  // @@protoc_insertion_point(copy_constructor:server.Creature.Motor)
}

inline void Creature_Motor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.number_){0u}
    , decltype(_impl_.max_value_){0u}
    , decltype(_impl_.min_value_){0u}
    , decltype(_impl_.smoothing_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Creature_Motor::~Creature_Motor() {
  // @@protoc_insertion_point(destructor:server.Creature.Motor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Creature_Motor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._id_.Destroy();
  _impl_.name_.Destroy();
}

void Creature_Motor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Creature_Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Creature.Motor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.smoothing_value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.smoothing_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Creature_Motor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.Creature.Motor.name"));
        } else
          goto handle_unusual;
        continue;
      // .server.Creature.MotorType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::server::Creature_MotorType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double smoothing_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.smoothing_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Creature_Motor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.Creature.Motor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal__id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.Creature.Motor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .server.Creature.MotorType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint32 number = 4;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number(), target);
  }

  // uint32 max_value = 5;
  if (this->_internal_max_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_value(), target);
  }

  // uint32 min_value = 6;
  if (this->_internal_min_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_value(), target);
  }

  // double smoothing_value = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_smoothing_value = this->_internal_smoothing_value();
  uint64_t raw_smoothing_value;
  memcpy(&raw_smoothing_value, &tmp_smoothing_value, sizeof(tmp_smoothing_value));
  if (raw_smoothing_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_smoothing_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.Creature.Motor)
  return target;
}

size_t Creature_Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Creature.Motor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .server.Creature.MotorType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 number = 4;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }

  // uint32 max_value = 5;
  if (this->_internal_max_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_value());
  }

  // uint32 min_value = 6;
  if (this->_internal_min_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_value());
  }

  // double smoothing_value = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_smoothing_value = this->_internal_smoothing_value();
  uint64_t raw_smoothing_value;
  memcpy(&raw_smoothing_value, &tmp_smoothing_value, sizeof(tmp_smoothing_value));
  if (raw_smoothing_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Creature_Motor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Creature_Motor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Creature_Motor::GetClassData() const { return &_class_data_; }


void Creature_Motor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Creature_Motor*>(&to_msg);
  auto& from = static_cast<const Creature_Motor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.Creature.Motor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__id().empty()) {
    _this->_internal_set__id(from._internal__id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_max_value() != 0) {
    _this->_internal_set_max_value(from._internal_max_value());
  }
  if (from._internal_min_value() != 0) {
    _this->_internal_set_min_value(from._internal_min_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_smoothing_value = from._internal_smoothing_value();
  uint64_t raw_smoothing_value;
  memcpy(&raw_smoothing_value, &tmp_smoothing_value, sizeof(tmp_smoothing_value));
  if (raw_smoothing_value != 0) {
    _this->_internal_set_smoothing_value(from._internal_smoothing_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Creature_Motor::CopyFrom(const Creature_Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Creature.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Creature_Motor::IsInitialized() const {
  return true;
}

void Creature_Motor::InternalSwap(Creature_Motor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._id_, lhs_arena,
      &other->_impl_._id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Creature_Motor, _impl_.smoothing_value_)
      + sizeof(Creature_Motor::_impl_.smoothing_value_)
      - PROTOBUF_FIELD_OFFSET(Creature_Motor, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Creature_Motor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[8]);
}

// ===================================================================

class Creature::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const Creature* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Creature::_Internal::last_updated(const Creature* msg) {
  return *msg->_impl_.last_updated_;
}
void Creature::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
}
Creature::Creature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.Creature)
}
Creature::Creature(const Creature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Creature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){from._impl_.motors_}
    , decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sacn_ip_){}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.universe_){}
    , decltype(_impl_.dmx_base_){}
    , decltype(_impl_.number_of_motors_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__id().empty()) {
    _this->_impl_._id_.Set(from._internal__id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sacn_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sacn_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sacn_ip().empty()) {
    _this->_impl_.sacn_ip_.Set(from._internal_sacn_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_updated()) {
    _this->_impl_.last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_updated_);
  }
  ::memcpy(&_impl_.universe_, &from._impl_.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_of_motors_) -
    reinterpret_cast<char*>(&_impl_.universe_)) + sizeof(_impl_.number_of_motors_));
  // @@protoc_insertion_point(copy_constructor:server.Creature)
}

inline void Creature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motors_){arena}
    , decltype(_impl_._id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sacn_ip_){}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.universe_){0u}
    , decltype(_impl_.dmx_base_){0u}
    , decltype(_impl_.number_of_motors_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_._id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sacn_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sacn_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Creature::~Creature() {
  // @@protoc_insertion_point(destructor:server.Creature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Creature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motors_.~RepeatedPtrField();
  _impl_._id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.sacn_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_updated_;
}

void Creature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Creature::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Creature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.motors_.Clear();
  _impl_._id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.sacn_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
  ::memset(&_impl_.universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_of_motors_) -
      reinterpret_cast<char*>(&_impl_.universe_)) + sizeof(_impl_.number_of_motors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Creature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes _id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable__id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.Creature.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sacn_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sacn_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.Creature.sacn_ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 universe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dmx_base = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dmx_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_of_motors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.number_of_motors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .server.Creature.Motor motors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Creature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.Creature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal__id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.Creature.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  // string sacn_ip = 4;
  if (!this->_internal_sacn_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sacn_ip().data(), static_cast<int>(this->_internal_sacn_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.Creature.sacn_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sacn_ip(), target);
  }

  // uint32 universe = 5;
  if (this->_internal_universe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_universe(), target);
  }

  // uint32 dmx_base = 6;
  if (this->_internal_dmx_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dmx_base(), target);
  }

  // uint32 number_of_motors = 7;
  if (this->_internal_number_of_motors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_of_motors(), target);
  }

  // repeated .server.Creature.Motor motors = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motors_size()); i < n; i++) {
    const auto& repfield = this->_internal_motors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.Creature)
  return target;
}

size_t Creature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Creature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server.Creature.Motor motors = 8;
  total_size += 1UL * this->_internal_motors_size();
  for (const auto& msg : this->_impl_.motors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes _id = 1;
  if (!this->_internal__id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sacn_ip = 4;
  if (!this->_internal_sacn_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sacn_ip());
  }

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_);
  }

  // uint32 universe = 5;
  if (this->_internal_universe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_universe());
  }

  // uint32 dmx_base = 6;
  if (this->_internal_dmx_base() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dmx_base());
  }

  // uint32 number_of_motors = 7;
  if (this->_internal_number_of_motors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_motors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Creature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Creature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Creature::GetClassData() const { return &_class_data_; }


void Creature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Creature*>(&to_msg);
  auto& from = static_cast<const Creature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.Creature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.motors_.MergeFrom(from._impl_.motors_);
  if (!from._internal__id().empty()) {
    _this->_internal_set__id(from._internal__id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_sacn_ip().empty()) {
    _this->_internal_set_sacn_ip(from._internal_sacn_ip());
  }
  if (from._internal_has_last_updated()) {
    _this->_internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_updated());
  }
  if (from._internal_universe() != 0) {
    _this->_internal_set_universe(from._internal_universe());
  }
  if (from._internal_dmx_base() != 0) {
    _this->_internal_set_dmx_base(from._internal_dmx_base());
  }
  if (from._internal_number_of_motors() != 0) {
    _this->_internal_set_number_of_motors(from._internal_number_of_motors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Creature::CopyFrom(const Creature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Creature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Creature::IsInitialized() const {
  return true;
}

void Creature::InternalSwap(Creature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.motors_.InternalSwap(&other->_impl_.motors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._id_, lhs_arena,
      &other->_impl_._id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sacn_ip_, lhs_arena,
      &other->_impl_.sacn_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Creature, _impl_.number_of_motors_)
      + sizeof(Creature::_impl_.number_of_motors_)
      - PROTOBUF_FIELD_OFFSET(Creature, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Creature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[9]);
}

// ===================================================================

class LogLine::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogLine* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LogLine::_Internal::timestamp(const LogLine* msg) {
  return *msg->_impl_.timestamp_;
}
void LogLine::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
LogLine::LogLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.LogLine)
}
LogLine::LogLine(const LogLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:server.LogLine)
}

inline void LogLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogLine::~LogLine() {
  // @@protoc_insertion_point(destructor:server.LogLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void LogLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogLine::Clear() {
// @@protoc_insertion_point(message_clear_start:server.LogLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .server.LogLevel level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::server::LogLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.LogLine.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.LogLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .server.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.LogLine.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.LogLine)
  return target;
}

size_t LogLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.LogLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .server.LogLevel level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogLine::GetClassData() const { return &_class_data_; }


void LogLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogLine*>(&to_msg);
  auto& from = static_cast<const LogLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.LogLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogLine::CopyFrom(const LogLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.LogLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogLine::IsInitialized() const {
  return true;
}

void LogLine::InternalSwap(LogLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogLine, _impl_.level_)
      + sizeof(LogLine::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(LogLine, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[10]);
}

// ===================================================================

class Frame::_Internal {
 public:
};

Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Frame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.creature_name_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.universe_){}
    , decltype(_impl_.dmx_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creature_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creature_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creature_name().empty()) {
    _this->_impl_.creature_name_.Set(from._internal_creature_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame().empty()) {
    _this->_impl_.frame_.Set(from._internal_frame(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.universe_, &from._impl_.universe_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dmx_offset_) -
    reinterpret_cast<char*>(&_impl_.universe_)) + sizeof(_impl_.dmx_offset_));
  // @@protoc_insertion_point(copy_constructor:server.Frame)
}

inline void Frame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.creature_name_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.universe_){0u}
    , decltype(_impl_.dmx_offset_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.creature_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creature_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:server.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.creature_name_.Destroy();
  _impl_.frame_.Destroy();
}

void Frame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:server.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.creature_name_.ClearToEmpty();
  _impl_.frame_.ClearToEmpty();
  ::memset(&_impl_.universe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dmx_offset_) -
      reinterpret_cast<char*>(&_impl_.universe_)) + sizeof(_impl_.dmx_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 universe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.universe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dmx_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dmx_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creature_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_creature_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.Frame.creature_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 universe = 1;
  if (this->_internal_universe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_universe(), target);
  }

  // uint32 dmx_offset = 2;
  if (this->_internal_dmx_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dmx_offset(), target);
  }

  // string creature_name = 3;
  if (!this->_internal_creature_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creature_name().data(), static_cast<int>(this->_internal_creature_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.Frame.creature_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_creature_name(), target);
  }

  // bytes frame = 4;
  if (!this->_internal_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string creature_name = 3;
  if (!this->_internal_creature_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creature_name());
  }

  // bytes frame = 4;
  if (!this->_internal_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame());
  }

  // uint32 universe = 1;
  if (this->_internal_universe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_universe());
  }

  // uint32 dmx_offset = 2;
  if (this->_internal_dmx_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dmx_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }


void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Frame*>(&to_msg);
  auto& from = static_cast<const Frame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.Frame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_creature_name().empty()) {
    _this->_internal_set_creature_name(from._internal_creature_name());
  }
  if (!from._internal_frame().empty()) {
    _this->_internal_set_frame(from._internal_frame());
  }
  if (from._internal_universe() != 0) {
    _this->_internal_set_universe(from._internal_universe());
  }
  if (from._internal_dmx_offset() != 0) {
    _this->_internal_set_dmx_offset(from._internal_dmx_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creature_name_, lhs_arena,
      &other->_impl_.creature_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_, lhs_arena,
      &other->_impl_.frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, _impl_.dmx_offset_)
      + sizeof(Frame::_impl_.dmx_offset_)
      - PROTOBUF_FIELD_OFFSET(Frame, _impl_.universe_)>(
          reinterpret_cast<char*>(&_impl_.universe_),
          reinterpret_cast<char*>(&other->_impl_.universe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[11]);
}

// ===================================================================

class FrameResponse::_Internal {
 public:
};

FrameResponse::FrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.FrameResponse)
}
FrameResponse::FrameResponse(const FrameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.frames_processed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.frames_processed_ = from._impl_.frames_processed_;
  // @@protoc_insertion_point(copy_constructor:server.FrameResponse)
}

inline void FrameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.frames_processed_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameResponse::~FrameResponse() {
  // @@protoc_insertion_point(destructor:server.FrameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void FrameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server.FrameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.frames_processed_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 frames_processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frames_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "server.FrameResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.FrameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frames_processed = 1;
  if (this->_internal_frames_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frames_processed(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server.FrameResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.FrameResponse)
  return target;
}

size_t FrameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.FrameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 frames_processed = 1;
  if (this->_internal_frames_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_processed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameResponse::GetClassData() const { return &_class_data_; }


void FrameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameResponse*>(&to_msg);
  auto& from = static_cast<const FrameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.FrameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_frames_processed() != 0) {
    _this->_internal_set_frames_processed(from._internal_frames_processed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameResponse::CopyFrom(const FrameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.FrameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameResponse::IsInitialized() const {
  return true;
}

void FrameResponse::InternalSwap(FrameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.frames_processed_, other->_impl_.frames_processed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[12]);
}

// ===================================================================

class ServerStatus::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const ServerStatus* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ServerStatus::_Internal::started_at(const ServerStatus* msg) {
  return *msg->_impl_.started_at_;
}
void ServerStatus::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
}
ServerStatus::ServerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:server.ServerStatus)
}
ServerStatus::ServerStatus(const ServerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.frames_processed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_started_at()) {
    _this->_impl_.started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.started_at_);
  }
  _this->_impl_.frames_processed_ = from._impl_.frames_processed_;
  // @@protoc_insertion_point(copy_constructor:server.ServerStatus)
}

inline void ServerStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.frames_processed_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerStatus::~ServerStatus() {
  // @@protoc_insertion_point(destructor:server.ServerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.started_at_;
}

void ServerStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:server.ServerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.started_at_ != nullptr) {
    delete _impl_.started_at_;
  }
  _impl_.started_at_ = nullptr;
  _impl_.frames_processed_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 frames_processed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.frames_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp started_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server.ServerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 frames_processed = 1;
  if (this->_internal_frames_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frames_processed(), target);
  }

  // .google.protobuf.Timestamp started_at = 2;
  if (this->_internal_has_started_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::started_at(this),
        _Internal::started_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server.ServerStatus)
  return target;
}

size_t ServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server.ServerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp started_at = 2;
  if (this->_internal_has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.started_at_);
  }

  // uint64 frames_processed = 1;
  if (this->_internal_frames_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frames_processed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerStatus::GetClassData() const { return &_class_data_; }


void ServerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerStatus*>(&to_msg);
  auto& from = static_cast<const ServerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:server.ServerStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_started_at()) {
    _this->_internal_mutable_started_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_started_at());
  }
  if (from._internal_frames_processed() != 0) {
    _this->_internal_set_frames_processed(from._internal_frames_processed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerStatus::CopyFrom(const ServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server.ServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatus::IsInitialized() const {
  return true;
}

void ServerStatus::InternalSwap(ServerStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerStatus, _impl_.frames_processed_)
      + sizeof(ServerStatus::_impl_.frames_processed_)
      - PROTOBUF_FIELD_OFFSET(ServerStatus, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::server::CreatureIdentifier*
Arena::CreateMaybeMessage< ::server::CreatureIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::CreatureIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::server::ListCreaturesResponse*
Arena::CreateMaybeMessage< ::server::ListCreaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::ListCreaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::GetAllCreaturesResponse*
Arena::CreateMaybeMessage< ::server::GetAllCreaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::GetAllCreaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::CreatureFilter*
Arena::CreateMaybeMessage< ::server::CreatureFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::CreatureFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::server::DatabaseInfo*
Arena::CreateMaybeMessage< ::server::DatabaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::DatabaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::server::LogFilter*
Arena::CreateMaybeMessage< ::server::LogFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::LogFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::server::CreatureId*
Arena::CreateMaybeMessage< ::server::CreatureId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::CreatureId >(arena);
}
template<> PROTOBUF_NOINLINE ::server::CreatureName*
Arena::CreateMaybeMessage< ::server::CreatureName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::CreatureName >(arena);
}
template<> PROTOBUF_NOINLINE ::server::Creature_Motor*
Arena::CreateMaybeMessage< ::server::Creature_Motor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::Creature_Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::server::Creature*
Arena::CreateMaybeMessage< ::server::Creature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::Creature >(arena);
}
template<> PROTOBUF_NOINLINE ::server::LogLine*
Arena::CreateMaybeMessage< ::server::LogLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::LogLine >(arena);
}
template<> PROTOBUF_NOINLINE ::server::Frame*
Arena::CreateMaybeMessage< ::server::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::server::FrameResponse*
Arena::CreateMaybeMessage< ::server::FrameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::FrameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server::ServerStatus*
Arena::CreateMaybeMessage< ::server::ServerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::server::ServerStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
